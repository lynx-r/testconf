/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import org.hibernate.validator.constraints.NotEmpty;

import javax.persistence.*;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;

import static javax.persistence.GenerationType.IDENTITY;

@Entity
@Table(name = "USER")
public class User implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(User.class.getName());

    // Raw attributes
    private Integer id;
    private String username;
    private String password;
    private String firstName;
    private String lastName;
    private Role role;

    // Many to many
    private List<Presentation> presentations = new ArrayList<Presentation>();

    @Override
    public String entityClassName() {
        return User.class.getSimpleName();
    }

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Default implementation returns hard coded granted authorities for this account (i.e. "ROLE_USER" and "ROLE_ADMIN").
     * Or you can follow Celerio Account Table convention. Please refer to Celerio Documentation.
     */
    @Transient
    public List<String> getRoleNames() {
        return Collections.singletonList(role.name());
    }
    // -- [id] ------------------------

    @Override
    @Column(name = "ID", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public User id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [username] ------------------------

    @NotEmpty
    @Size(max = 100)
    @Column(name = "USERNAME", nullable = false, unique = true, length = 100)
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public User username(String email) {
        setUsername(email);
        return this;
    }
    // -- [password] ------------------------

    @NotEmpty
    @Size(max = 100)
    @Column(name = "PASSWORD", nullable = false, length = 100)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public User password(String password) {
        setPassword(password);
        return this;
    }
    // -- [firstName] ------------------------

    @Size(max = 100)
    @Column(name = "FIRST_NAME", length = 100)
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public User firstName(String firstName) {
        setFirstName(firstName);
        return this;
    }
    // -- [lastName] ------------------------

    @Size(max = 100)
    @Column(name = "LAST_NAME", length = 100)
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public User lastName(String lastName) {
        setLastName(lastName);
        return this;
    }
    // -- [role] ------------------------

    @Column(name = "ROLE", length = 50)
    @Convert(converter = RoleConverter.class)
    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public User role(Role role) {
        setRole(role);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: user ==> presentations
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #presentations} list.
     */
    @JoinTable(name = "USER_PRESENTATION", joinColumns = @JoinColumn(name = "USER_ID") , inverseJoinColumns = @JoinColumn(name = "PRESENTATION_ID") )
    @ManyToMany
    public List<Presentation> getPresentations() {
        return presentations;
    }

    /**
     * Set the {@link #presentations} list.
     *
     * @param presentations the list of Presentation
     */
    public void setPresentations(List<Presentation> presentations) {
        this.presentations = presentations;
    }

    /**
     * Helper method to add the passed {@link Presentation} to the {@link #presentations} list.
     */
    public boolean addPresentation(Presentation presentation) {
        return getPresentations().add(presentation);
    }

    /**
     * Helper method to remove the passed {@link Presentation} from the {@link #presentations} list.
     */
    public boolean removePresentation(Presentation presentation) {
        return getPresentations().remove(presentation);
    }

    /**
     * Helper method to determine if the passed {@link Presentation} is present in the {@link #presentations} list.
     */
    public boolean containsPresentation(Presentation presentation) {
        return getPresentations() != null && getPresentations().contains(presentation);
    }

    /**
     * Apply the default values.
     */
    public User withDefaults() {
        setRole(Role.ROLE_LISTENER);
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof User && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getUsername());

        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warning("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this User instance.
     * @see Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("username", getUsername()) //
                .add("password", "XXXX") //
                .add("firstName", getFirstName()) //
                .add("lastName", getLastName()) //
                .add("role", getRole()) //
                .toString();
    }
}
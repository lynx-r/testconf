/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import com.google.common.base.MoreObjects;

import javax.persistence.*;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;

import static javax.persistence.GenerationType.IDENTITY;

@Entity
@Table(name = "PRESENTATION")
public class Presentation implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Presentation.class.getName());

    // Raw attributes
    private Integer id;

    private Set<User> presenters = new HashSet<>();
    private Schedule schedule;

    private String title;

    @Override
    public String entityClassName() {
        return Presentation.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "ID", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Presentation id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [title] -------------------
    @Size(max = 100)
    @Column(name = "TITLE", length = 100)
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Presentation title(String title) {
        setTitle(title);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-many: user ==> presentations
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /**
     * Returns the {@link #presenters} list.
     */
    @JoinTable(name = "USER_PRESENTATION", joinColumns = @JoinColumn(name = "PRESENTATION_ID") , inverseJoinColumns = @JoinColumn(name = "USER_ID") )
    @ManyToMany
    public Set<User> getPresenters() {
        return presenters;
    }

    /**
     * Set the {@link #presenters} list.
     *
     * @param presenters the list of Presentation
     */
    public void setPresenters(Set<User> presenters) {
        this.presenters = presenters;
    }

    /**
     * Helper method to add the passed {@link Presentation} to the {@link #presenters} list.
     */
    public Presentation addPresenter(User presenter) {
        getPresenters().add(presenter);
        return this;
    }

    /**
     * Helper method to remove the passed {@link User} from the {@link #presenters} list.
     */
    public boolean removePresenter(User presenter) {
        return getPresenters().remove(presenter);
    }

    /**
     * Helper method to determine if the passed {@link User} is present in the {@link #presenters} list.
     */
    public boolean containsPresenter(User presenter) {
        return getPresenters() != null && getPresenters().contains(presenter);
    }

    @JoinColumn(name = "")
    @OneToOne(cascade = {CascadeType.REMOVE})
    public Schedule getSchedule() {
        return schedule;
    }

    public void setSchedule(Schedule schedule) {
        this.schedule = schedule;
    }

    /**
     * Apply the default values.
     */
    public Presentation withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Presentation && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Presentation instance.
     * @see Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("title", getTitle()) //
                .toString();
    }
}
/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.mycompany.myapp.rest;

import com.mycompany.myapp.dto.RoomDTO;
import com.mycompany.myapp.dto.ScheduleDTO;
import com.mycompany.myapp.dto.ScheduleDTOService;
import com.mycompany.myapp.repository.ScheduleRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.inject.Inject;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;

@RestController
@RequestMapping("/api/schedules")
public class ScheduleResource {

    private final Logger log = LoggerFactory.getLogger(ScheduleResource.class);

    @Inject
    private ScheduleRepository scheduleRepository;
    @Inject
    private ScheduleDTOService scheduleDTOService;

    /**
    * Find by id Schedule.
    */
    @RequestMapping(value = "/groupBy/room", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Map<RoomDTO, List<ScheduleDTO>>> findAllGroupByRoom() throws URISyntaxException {

        Map<RoomDTO, List<ScheduleDTO>> allGroupedByRoom = scheduleDTOService.findAllGroupedByRoom();
        return Optional.ofNullable(allGroupedByRoom).map(scheduleDTO -> new ResponseEntity<>(scheduleDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Delete by id Schedule.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Delete by id Schedule : {}", id);

        try {
            scheduleRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }

}
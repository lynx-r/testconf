/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import com.mycompany.myapp.domain.Role;
import com.mycompany.myapp.domain.User;
import com.mycompany.myapp.domain.User_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.PresentationRepository;
import com.mycompany.myapp.repository.UserRepository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Inject;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for User.
 */
@Service
public class UserDTOService {

    private final UserRepository userRepository;
    @Inject
    private PresentationDTOService presentationDTOService;
    private final PresentationRepository presentationRepository;
    private final PasswordEncoder passwordEncoder;

    @Inject
    public UserDTOService(UserRepository userRepository, PresentationRepository presentationRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.presentationRepository = presentationRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Transactional(readOnly = true)
    public UserDTO findOne(Integer id) {
        return toDTO(userRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public PageResponse<UserDTO> findAll(PageRequestByExample<UserDTO> req) {
        Example<User> example = null;
        User user = toEntity(req.example);

        if (user != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(User_.username.getName(), match -> match.ignoreCase().exact())
                    .withMatcher(User_.role.getName(), match -> match.ignoreCase().exact())
                    .withMatcher(User_.firstName.getName(), match -> match.ignoreCase().exact())
                    .withMatcher(User_.lastName.getName(), match -> match.ignoreCase().exact());

            example = Example.of(user, matcher);
        }

        Page<User> page;
        if (example != null) {
            page = userRepository.findAll(example, req.toPageable());
        } else {
            page = userRepository.findAll(req.toPageable());
        }

        List<UserDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public UserDTO save(UserDTO dto) {
        if (dto == null) {
            return null;
        }

        final User user;

        if (dto.isIdSet()) {
            User userTmp = userRepository.findOne(dto.id);
            if (userTmp != null) {
                user = userTmp;
            } else {
                user = new User();
                user.setId(dto.id);
            }
            user.setPassword(dto.password);
            user.setRole(dto.role);
        } else {
            user = new User();
            user.setRole(Role.ROLE_LISTENER);
            user.password(passwordEncoder.encode(dto.password));
        }

        user.setUsername(dto.username);

        user.setFirstName(dto.firstName);

        user.setLastName(dto.lastName);

        user.getPresentations().clear();
        if (dto.presentations != null) {
            dto.presentations.forEach(presentation -> user.addPresentation(presentationRepository.findOne(presentation.id)));
        }

        return toDTO(userRepository.save(user));
    }

    /**
     * Converts the passed user to a DTO.
     */
    public UserDTO toDTO(User user) {
        return toDTO(user, 1);
    }

    /**
     * Converts the passed user to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param user
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public UserDTO toDTO(User user, int depth) {
        if (user == null) {
            return null;
        }

        UserDTO dto = new UserDTO();

        dto.id = user.getId();
        dto.username = user.getUsername();
        dto.password = user.getPassword();
        dto.firstName = user.getFirstName();
        dto.lastName = user.getLastName();
        dto.role = user.getRole();
        if (depth-- > 0) {
            int finalDepth = depth;
            dto.presentations = user.getPresentations()
                    .stream()
                    .map(presentation -> presentationDTOService.toDTO(presentation, finalDepth))
                    .collect(Collectors.toSet());
        }

        return dto;
    }

    /**
     * Converts the passed dto to a User.
     * Convenient for query by example.
     */
    public User toEntity(UserDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a User.
     * Convenient for query by example.
     */
    public User toEntity(UserDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        User user = new User();

        user.setId(dto.id);
        user.setUsername(dto.username);
        user.setPassword(dto.password);
        user.setFirstName(dto.firstName);
        user.setLastName(dto.lastName);
        user.setRole(dto.role);
        if (depth-- > 0 && dto.presentations != null) {
            user.setPresentations(presentationDTOService.toEntities(dto.presentations, depth));
        }

        return user;
    }

    public Set<User> toEntities(Set<UserDTO> presenters, int depth) {
        return presenters
                .stream()
                .map(userDTO -> toEntity(userDTO, depth))
                .collect(Collectors.toSet());
    }

    public Set<UserDTO> toDTOs(Set<User> users, int depth) {
        return users.stream()
                .map(user -> this.toDTO(user, depth))
                .collect(Collectors.toSet());
    }
}
/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import com.mycompany.myapp.domain.Presentation;
import com.mycompany.myapp.domain.Room;
import com.mycompany.myapp.domain.Schedule;
import com.mycompany.myapp.exception.TimeOccupiedException;
import com.mycompany.myapp.repository.PresentationRepository;
import com.mycompany.myapp.repository.RoomRepository;
import com.mycompany.myapp.repository.ScheduleRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Inject;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for Schedule.
 */
@Service
public class ScheduleDTOService {

    @Inject
    private ScheduleRepository scheduleRepository;
    @Inject
    private RoomDTOService roomDTOService;
    @Inject
    private RoomRepository roomRepository;
    @Inject
    private PresentationDTOService presentationDTOService;
    @Inject
    private PresentationRepository presentationRepository;
    @Inject
    private UserDTOService userService;

    @Transactional(readOnly = true)
    public ScheduleDTO findOne(Integer id) {
        return toDTO(scheduleRepository.findOne(id));
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ScheduleDTO save(ScheduleDTO dto) {
        if (dto == null) {
            return null;
        }

        final Schedule schedule;

        if (dto.isIdSet()) {
            Schedule scheduleTmp = scheduleRepository.findOne(dto.id);
            if (scheduleTmp != null) {
                schedule = scheduleTmp;
            } else {
                schedule = new Schedule();
                schedule.setId(dto.id);
            }
        } else {
            schedule = new Schedule();
        }

        List<Schedule> allByRoomId = scheduleRepository.findAllByRoomId(dto.room.id);
        allByRoomId.remove(schedule);
        LocalDateTime currentEventEnd = dto.eventTime.plus(dto.eventDurationMin, ChronoUnit.MINUTES);
        final List<Schedule> intersect = allByRoomId.stream()
                .filter(sc -> {
                    LocalDateTime eventEnd = sc.getEventTime()
                            .plus(sc.getEventDurationMin(), ChronoUnit.MINUTES);
                    return (isBeyondOrEqual(LocalDateTime::isAfter, dto.eventTime, sc.getEventTime())// новое время после начала и перед концом, т.е. в середине
                            && isBeyondOrEqual(LocalDateTime::isBefore, currentEventEnd, eventEnd))
                            ||
                            (isBeyondOrEqual(LocalDateTime::isAfter, dto.eventTime, sc.getEventTime()) // новое время после начала и заканчивается, но перед концом
                                    && isBeyondOrEqual(LocalDateTime::isBefore, dto.eventTime, eventEnd))
                            ||
                            (isBeyondOrEqual(LocalDateTime::isBefore, dto.eventTime, sc.getEventTime()) // новое время перед началом, но заканчивается после начала в расписании
                                    && isBeyondOrEqual(LocalDateTime::isAfter, currentEventEnd, sc.getEventTime()));
                }).collect(Collectors.toList());
        if (intersect.size() > 0) {
            String presentations = intersect.stream().map(schedule1 -> schedule1.getPresentation().getTitle()).collect(Collectors.joining(", "));
            throw new TimeOccupiedException("Время занято следующими докладами: " + presentations);
        }
        schedule.setEventTime(dto.eventTime);
        schedule.setEventDurationMin(dto.eventDurationMin);

        Room room = roomRepository.findOne(dto.room.id);
        schedule.setRoom(room);

        if (dto.presentation.id == null) {
            schedule.setPresentation(presentationDTOService.toEntity(dto.presentation));
        } else {
            Presentation presentation = presentationRepository.findOne(schedule.getPresentation().getId());
            presentation.title(dto.presentation.title);
            schedule.setPresentation(presentation);
        }

        return toDTO(scheduleRepository.save(schedule));
    }

    private boolean isBeyondOrEqual(BiFunction<LocalDateTime, LocalDateTime, Boolean> func,
                                    LocalDateTime firstTime,
                                    LocalDateTime secondTime) {
        return func.apply(firstTime, secondTime) || firstTime.isEqual(secondTime);
    }

    /**
     * Converts the passed schedule to a DTO.
     */
    public ScheduleDTO toDTO(Schedule schedule) {
        return toDTO(schedule, 2);
    }

    /**
     * Converts the passed schedule to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param schedule
     * @param depth    the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *                 A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *                 xToOne associations will be serialized, etc.
     */
    public ScheduleDTO toDTO(Schedule schedule, int depth) {
        if (schedule == null) {
            return null;
        }

        ScheduleDTO dto = new ScheduleDTO();

        dto.id = schedule.getId();
        dto.eventTime = schedule.getEventTime();
        dto.eventDurationMin = schedule.getEventDurationMin();

        if (depth-- > 0) {
            dto.room = roomDTOService.toDTO(schedule.getRoom());
            dto.presentation = presentationDTOService.toDTO(schedule.getPresentation(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Schedule.
     * Convenient for query by example.
     */
    public Schedule toEntity(ScheduleDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Schedule.
     * Convenient for query by example.
     */
    public Schedule toEntity(ScheduleDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Schedule schedule = new Schedule();

        schedule.setId(dto.id);
        schedule.setEventTime(dto.eventTime);
        schedule.setEventDurationMin(dto.eventDurationMin);
        if (depth-- > 0) {
            schedule.setRoom(roomDTOService.toEntity(dto.room, depth));
            schedule.setPresentation(presentationDTOService.toEntity(dto.presentation, depth));
        }

        return schedule;
    }

    public List<ScheduleDTO> findAllByPresenterId(Integer presenterId) {
        return toDTOs(scheduleRepository.findAllByPresenterId(presenterId));
    }

    private List<ScheduleDTO> toDTOs(List<Schedule> schedules) {
        return schedules.stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

    public ScheduleDTO saveWithPresenter(ScheduleDTO scheduleDto, Integer userId) {
        UserDTO user = userService.findOne(userId);
        scheduleDto.presentation.presenters.add(user);
        return save(scheduleDto);
    }

    public Map<RoomDTO, List<ScheduleDTO>> findAllGroupedByRoom() {
        List<ScheduleDTO> schedules = toDTOs(scheduleRepository.findAll());
        return schedules.stream().collect(Collectors.groupingBy(ScheduleDTO::getRoom));
    }
}